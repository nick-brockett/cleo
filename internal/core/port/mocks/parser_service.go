// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"cleo.com/internal/core/domain/model"
	"cleo.com/internal/core/port"
	"sync"
)

// Ensure, that HealthMetricParserServiceMock does implement port.HealthMetricParserService.
// If this is not the case, regenerate this file with moq.
var _ port.HealthMetricParserService = &HealthMetricParserServiceMock{}

// HealthMetricParserServiceMock is a mock implementation of port.HealthMetricParserService.
//
//	func TestSomethingThatUsesHealthMetricParserService(t *testing.T) {
//
//		// make and configure a mocked port.HealthMetricParserService
//		mockedHealthMetricParserService := &HealthMetricParserServiceMock{
//			ParseClinicalNoteFunc: func(note *model.ClinicalNote) (*model.HealthMetric, error) {
//				panic("mock out the ParseClinicalNote method")
//			},
//		}
//
//		// use mockedHealthMetricParserService in code that requires port.HealthMetricParserService
//		// and then make assertions.
//
//	}
type HealthMetricParserServiceMock struct {
	// ParseClinicalNoteFunc mocks the ParseClinicalNote method.
	ParseClinicalNoteFunc func(note *model.ClinicalNote) (*model.HealthMetric, error)

	// calls tracks calls to the methods.
	calls struct {
		// ParseClinicalNote holds details about calls to the ParseClinicalNote method.
		ParseClinicalNote []struct {
			// Note is the note argument value.
			Note *model.ClinicalNote
		}
	}
	lockParseClinicalNote sync.RWMutex
}

// ParseClinicalNote calls ParseClinicalNoteFunc.
func (mock *HealthMetricParserServiceMock) ParseClinicalNote(note *model.ClinicalNote) (*model.HealthMetric, error) {
	if mock.ParseClinicalNoteFunc == nil {
		panic("HealthMetricParserServiceMock.ParseClinicalNoteFunc: method is nil but HealthMetricParserService.ParseClinicalNote was just called")
	}
	callInfo := struct {
		Note *model.ClinicalNote
	}{
		Note: note,
	}
	mock.lockParseClinicalNote.Lock()
	mock.calls.ParseClinicalNote = append(mock.calls.ParseClinicalNote, callInfo)
	mock.lockParseClinicalNote.Unlock()
	return mock.ParseClinicalNoteFunc(note)
}

// ParseClinicalNoteCalls gets all the calls that were made to ParseClinicalNote.
// Check the length with:
//
//	len(mockedHealthMetricParserService.ParseClinicalNoteCalls())
func (mock *HealthMetricParserServiceMock) ParseClinicalNoteCalls() []struct {
	Note *model.ClinicalNote
} {
	var calls []struct {
		Note *model.ClinicalNote
	}
	mock.lockParseClinicalNote.RLock()
	calls = mock.calls.ParseClinicalNote
	mock.lockParseClinicalNote.RUnlock()
	return calls
}
